Функциональный интерфейс
	Функциональный интерфейс содержит только один абстрактный метод.
	Может содержать один или больше дефолтных или статичных методов.

	java.util.function
		Consumer<T>
			void accept(T t);
		Function<T, R> 
			R apply(T t);
		UnaryOperator<T> extends Function<T, T>
		
		Predicate<T>
			boolean test(T t);
		Supplier
			T get();
	
Лямбда выражение
		
	- список параметров через запятую в круглых скобках (если больше одного), затем ->
	- если есть return тело заключается в фигурные скобки {}
	- есть доступ к локальным переменным метода
	
	Лябда-выражения можно использовать в 
		Variable declarations
		Assignments
		Return statements
		Array initializers
		Method or constructor arguments
		Lambda expression bodies
		Conditional expressions ?:
		Cast expressions

Агрегирующие операции	
	
	filter, map, forEach
	
	Обрабатывают элементы из stream, а не из коллекции,	поэтому первый метод это stream()
	Stream это последовательность элементов, а не структура данных.
	Stream проводит values из источника (source), таких как collection, посредством pipeline. 
	Pipeline это stream operations, такой как filter-map-forEach
	Агрегирующие операции обычно принимают лямбда выражения как параметры
		
	interface BaseStream<T, S extends BaseStream<T, S>> extends AutoCloseable
		Iterator<T> iterator();
		Spliterator<T> spliterator();
		boolean isParallel();
		S sequential();
		S parallel();
		S unordered();
		S onClose(Runnable closeHandler);
	interface Stream<T> extends BaseStream<T, Stream<T>>		
		Stream<T> filter(Predicate<? super T> predicate);
		<R> Stream<R> map(Function<? super T, ? extends R> mapper);
		IntStream mapToInt(ToIntFunction<? super T> mapper);
		LongStream mapToLong(ToLongFunction<? super T> mapper);
		DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper);
		<R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper);
		IntStream flatMapToInt(Function<? super T, ? extends IntStream> mapper);
		LongStream flatMapToLong(Function<? super T, ? extends LongStream> mapper);
		DoubleStream flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper);
		Stream<T> distinct();
		Stream<T> sorted();
		Stream<T> sorted(Comparator<? super T> comparator);
		Stream<T> peek(Consumer<? super T> action);
		Stream<T> limit(long maxSize);
		Stream<T> skip(long n);
		void forEach(Consumer<? super T> action);
		void forEachOrdered(Consumer<? super T> action);
		Object[] toArray();
		<A> A[] toArray(IntFunction<A[]> generator);
		T reduce(T identity, BinaryOperator<T> accumulator);
		Optional<T> reduce(BinaryOperator<T> accumulator);
		<U> U reduce(U identity,
                 BiFunction<U, ? super T, U> accumulator,
                 BinaryOperator<U> combiner);
		<R> R collect(Supplier<R> supplier,
                  BiConsumer<R, ? super T> accumulator,
                  BiConsumer<R, R> combiner);
		<R, A> R collect(Collector<? super T, A, R> collector);
		Optional<T> min(Comparator<? super T> comparator);
		Optional<T> max(Comparator<? super T> comparator);
		long count();
		boolean anyMatch(Predicate<? super T> predicate);
		boolean allMatch(Predicate<? super T> predicate);
		boolean noneMatch(Predicate<? super T> predicate);
		Optional<T> findFirst();
		Optional<T> findAny();
		
		public static<T> Builder<T> builder() {return new Streams.StreamBuilderImpl<>();}
		public static<T> Stream<T> empty() {return StreamSupport.stream(Spliterators.<T>emptySpliterator(), false);}
		public static<T> Stream<T> of(T t)
		public static<T> Stream<T> of(T... values)
		public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)
		public static<T> Stream<T> generate(Supplier<T> s)
		public static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b)
		public interface Builder<T> extends Consumer<T>{
			void accept(T t);
			default Builder<T> add(T t)
			Stream<T> build();
		}